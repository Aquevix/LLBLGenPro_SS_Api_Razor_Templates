<# MJC_SS_GeneralMethods #><%
  var currentProject = _executingGenerator.ProjectDefinition;
  var rootNameSpace = _executingGenerator.RootNamespaceToUse;
  //-- Multi entity template --
  var entities = _executingGenerator.Entities;
  var typedViews = _executingGenerator.TypedViews;
  
  //-- Single entity template --
  var item = (TypedViewDefinition)_activeObject;
  var mapping = (TypedViewMapping)_executingGenerator.ProjectDefinition.GetGroupableModelElementMapping(item, _executingGenerator.DriverID);
  //The following doesn't give you proper ordering, you have to get the ordering from the MappedTarget
  //var fields = item.Fields.OrderBy(f => f.FieldIndex).ToList();   
  var fields = item.Fields.HasFieldOrdering ? item.Fields.ApplyFieldOrdering().ToList():
               item.Fields.OrderBy(f => mapping.GetFieldMappingOfField(f).MappedTarget.OrdinalPosition).ToList();
%>using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using SD.LLBLGen.Pro.ORMSupportClasses;
using ServiceStack.Text;
using <%=rootNameSpace%>;
using <%=rootNameSpace%>.Dtos;
using <%=rootNameSpace%>.Dtos.TypedViewDtos;
using <%=rootNameSpace%>.EntityClasses;
using <%=rootNameSpace%>.FactoryClasses;
using <%=rootNameSpace%>.Helpers;
using <%=rootNameSpace%>.HelperClasses;
using <%=rootNameSpace%>.ServiceInterfaces;
using <%=rootNameSpace%>.ServiceInterfaces.TypedViewServiceInterfaces;
using <%=rootNameSpace%>.Services;
using <%=rootNameSpace%>.Services.TypedViewServices;
using <%=rootNameSpace%>.TypedViewClasses;
<%=DotNetTemplateEngine.GetUserCodeRegion("SsSvcAdditionalNamespaces", @"//")%>

namespace <%=rootNameSpace%>.ServiceRepositories.TypedViewServiceRepositories
{ 
    public partial class <%=item.Name%>TypedViewServiceRepository : TypedViewServiceRepositoryBase<<%=item.Name%>>, I<%=item.Name%>TypedViewServiceRepository
<%=DotNetTemplateEngine.GetUserCodeRegion("SsSvcAdditionalInterfaces", @"//")%>
    {
        #region Class Extensibility Methods
        partial void OnCreateRepository();
        partial void OnBeforeFetch<%=item.Name%>QueryCollectionRequest(IDataAccessAdapter adapter, <%=item.Name%>QueryCollectionRequest request, SortExpression sortExpression, string[] includedFieldNames, IRelationPredicateBucket predicateBucket, int pageNumber, int pageSize, int limit);
        partial void OnAfterFetch<%=item.Name%>QueryCollectionRequest(IDataAccessAdapter adapter, <%=item.Name%>QueryCollectionRequest request, <%=item.Name%>TypedView typedView, SortExpression sortExpression, string[] includedFieldNames, IRelationPredicateBucket predicateBucket, int pageNumber, int pageSize, int limit, int totalItemCount);
        #endregion
        
        public override IDataAccessAdapterFactory DataAccessAdapterFactory { get; set; }
        
        protected override TypedViewType TypedViewType
        {
            get { return TypedViewType.<%=item.Name%>TypedView; }
        }
    
        public <%=item.Name%>TypedViewServiceRepository()
        {
            OnCreateRepository();
        }

        // Description for parameters: http://datatables.net/usage/server-side
        public DataTableResponse GetDataTableResponse(<%=item.Name%>DataTableRequest request)
        {
            var fieldMap = FieldMap;
            var fieldCount = fieldMap.Count;
        
            //UrlDecode Request Properties
            request.sSearch = System.Web.HttpUtility.UrlDecode(request.sSearch);
            request.Sort = System.Web.HttpUtility.UrlDecode(request.Sort);
            request.Filter = System.Web.HttpUtility.UrlDecode(request.Filter);
            request.Select = System.Web.HttpUtility.UrlDecode(request.Select);

            //Paging
            var iDisplayStart = request.iDisplayStart + 1; // this is because it passes in the 0 instead of 1, 10 instead of 11, etc...
            iDisplayStart = iDisplayStart <= 0 ? (1+((request.PageNumber-1)*request.PageSize)): iDisplayStart;
            var iDisplayLength = request.iDisplayLength <= 0 ? request.PageSize: request.iDisplayLength;
            var pageNumber = Math.Ceiling(iDisplayStart*1.0/iDisplayLength);
            var pageSize = iDisplayLength;
            //Sorting
            var sort = request.Sort;
            if (request.iSortingCols > 0 && request.iSortCol_0 >= 0)
            {
                sort = string.Format("{0}:{1}", fieldMap.Keys.ElementAt(Convert.ToInt32(request.iSortCol_0)), request.sSortDir_0);
            }
            //Search
            var filter = request.Filter;
            var searchStr = string.Empty;
            if (!string.IsNullOrEmpty(request.sSearch))
            {
                // process int field searches
                var n = 0;
                var searchStrAsInt = -1;
                if (int.TryParse(request.sSearch, out searchStrAsInt))
                {
                    foreach (var fm in fieldMap)
                    {
                        if (fm.Value.DataType.IsNumericType())
                        {
                            n++;
                            searchStr += string.Format("({0}:eq:{1})", fm.Key, searchStrAsInt);
                        }
                    }
                }
                // process string field searches
                foreach (var fm in fieldMap)
                {
                    if (fm.Value.DataType == typeof (string)/* && fm.Value.MaxLength < 2000*/)
                    {
                        n++;
                        searchStr += string.Format("({0}:lk:*{1}*)", fm.Key, request.sSearch);
                    }
                }
                searchStr = n > 1 ? "(|" + searchStr + ")": searchStr.Trim('(', ')');

                filter = string.IsNullOrEmpty(filter) ? searchStr
                    : string.Format("(^{0}{1})", 
                    filter.StartsWith("(") ? filter: "(" + filter + ")",
                    searchStr.StartsWith("(") ? searchStr : "(" + searchStr + ")");
            }

            var entities = Fetch(new <%=item.Name%>QueryCollectionRequest
                {
                    Filter = filter, 
                    PageNumber = Convert.ToInt32(pageNumber),
                    PageSize = pageSize,
                    Sort = sort,
                    Select = request.Select,
                });
                     
            var response = new DataTableResponse();
            foreach (var item in entities.Result)
            {
                response.aaData.Add(new string[]
                {
<%  for(var fi=0;fi<fields.Count;fi++) {
        var field = fields[fi];
        string dotNetFieldTypeName = MJC_SS_GeneralMethods.ProduceDotNetTypeName(field, _executingGenerator, "Nullable<{0}>");
        var isOfStringType = dotNetFieldTypeName.IndexOf("string", 0, StringComparison.InvariantCultureIgnoreCase)>=0;
        if(IsFieldBinary(field)) {
%>                        string.Format("<ul class=\"thumbnails\"><li class=\"span12\"><div class=\"thumbnail\">{0}</div></li></ul>", item.<%=field.Name%>.ToImageSrc(null, 160))<%=(fi>=fields.Count-1?"":",")%><%
        } else {
%>                        item.<%=field.Name%><%if(!isOfStringType){%>.ToString()<%}%><%=(fi>=fields.Count-1?"":",")%>
<%
        }
    }%>
                });
            }

            response.sEcho = request.sEcho;
            // total records in the database before datatables search
            response.iTotalRecords = entities.Paging.TotalCount;
            // total records in the database after datatables search
            response.iTotalDisplayRecords = entities.Paging.TotalCount;
            return response;
        }
    
        public <%=item.Name%>CollectionResponse Fetch(<%=item.Name%>QueryCollectionRequest request)
        {
            base.FixupLimitAndPagingOnRequest(request);

            var totalItemCount = 0;
            var sortExpression = RepositoryHelper.ConvertStringToSortExpression(TypedViewType, request.Sort);
            var includedFieldNames = RepositoryHelper.ConvertStringToExcludedIncludedFields(request.Select);
            var predicateBucket = RepositoryHelper.ConvertStringToRelationPredicateBucket(TypedViewType, request.Filter);

            var typedView = new <%=item.Name%>TypedView();
            using (var adapter = DataAccessAdapterFactory.NewDataAccessAdapter())
            {
                OnBeforeFetch<%=item.Name%>QueryCollectionRequest(adapter, request, sortExpression, includedFieldNames, predicateBucket,
                    request.PageNumber, request.PageSize, request.Limit);
                totalItemCount = (int)adapter.GetDbCount(typedView.GetFieldsInfo(), predicateBucket, null, false);
                adapter.FetchTypedView(typedView.GetFieldsInfo(), typedView, predicateBucket, request.Limit, sortExpression, true, null, request.PageNumber, request.PageSize);
                OnAfterFetch<%=item.Name%>QueryCollectionRequest(adapter, request, typedView, sortExpression, includedFieldNames, predicateBucket,
                    request.PageNumber, request.PageSize, request.Limit, totalItemCount);
            }

            var dtos = new <%=item.Name%>Collection();
            var enumerator = typedView.GetEnumerator();
            while (enumerator.MoveNext())
            {
                dtos.Add(Map(enumerator.Current, includedFieldNames));
            }

            var response = new <%=item.Name%>CollectionResponse(dtos, request.PageNumber,
                                                          request.PageSize, totalItemCount);
            return response;       
        }

        private <%=item.Name%> Map(<%=item.Name%>Row row, string[] fieldNames)
        {
            var hasFn = fieldNames != null && fieldNames.Any();
            var item = new <%=item.Name%>();
<%  for(var fi=0;fi<fields.Count;fi++)
    {
        var field = fields[fi];
%>            if (!hasFn || fieldNames.Contains("<%=field.Name%>", StringComparer.OrdinalIgnoreCase))
                item.<%=field.Name%> = row.<%=field.Name%>;
<%  } %>

            return item;
        }
    
<%=DotNetTemplateEngine.GetUserCodeRegion("SsSvcAdditionalMethods", @"//")%>

    }
}
